//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Freya.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class FreyaLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, ID=11, LINE_COMMENT=12, BLOCK_COMMENT=13, LPAREN=14, RPAREN=15, 
		PERCENT_I=16, PERCENT_S=17, PERCENT_F=18, COLON_I=19, DIGITS=20, FLOAT_NUMBER=21, 
		STRING_DOUBLE=22, STRING_SINGLE=23, PLUS=24, MINUS=25, MULT=26, DIV=27, 
		COMMA=28, WS=29;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "ID", "LINE_COMMENT", "BLOCK_COMMENT", "LPAREN", "RPAREN", "PERCENT_I", 
		"PERCENT_S", "PERCENT_F", "COLON_I", "DIGITS", "FLOAT_NUMBER", "STRING_DOUBLE", 
		"STRING_SINGLE", "PLUS", "MINUS", "MULT", "DIV", "COMMA", "WS"
	};


	public FreyaLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public FreyaLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'script'", "'['", "'endfunction'", "']'", "'SektStruk'", "'native'", 
		"'{'", "'StrukKey'", "'}'", "'='", null, null, null, "'('", "')'", "'%i'", 
		"'%s'", "'%f'", "':i'", null, null, null, null, "'+'", "'-'", "'*'", "'/'", 
		"','"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, "ID", 
		"LINE_COMMENT", "BLOCK_COMMENT", "LPAREN", "RPAREN", "PERCENT_I", "PERCENT_S", 
		"PERCENT_F", "COLON_I", "DIGITS", "FLOAT_NUMBER", "STRING_DOUBLE", "STRING_SINGLE", 
		"PLUS", "MINUS", "MULT", "DIV", "COMMA", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Freya.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static FreyaLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,29,210,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,
		1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
		8,1,8,1,9,1,9,1,10,1,10,5,10,117,8,10,10,10,12,10,120,9,10,1,11,1,11,1,
		11,1,11,5,11,126,8,11,10,11,12,11,129,9,11,1,11,1,11,1,12,1,12,1,12,1,
		12,5,12,137,8,12,10,12,12,12,140,9,12,1,12,1,12,1,12,1,12,1,12,1,13,1,
		13,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,
		18,1,19,4,19,164,8,19,11,19,12,19,165,1,20,1,20,1,20,1,20,1,21,1,21,1,
		21,1,21,5,21,176,8,21,10,21,12,21,179,9,21,1,21,1,21,1,22,1,22,1,22,1,
		22,5,22,187,8,22,10,22,12,22,190,9,22,1,22,1,22,1,23,1,23,1,24,1,24,1,
		25,1,25,1,26,1,26,1,27,1,27,1,28,4,28,205,8,28,11,28,12,28,206,1,28,1,
		28,1,138,0,29,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,
		25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,
		49,25,51,26,53,27,55,28,57,29,1,0,7,3,0,65,90,95,95,97,122,4,0,48,57,65,
		90,95,95,97,122,2,0,10,10,13,13,1,0,48,57,2,0,34,34,92,92,2,0,39,39,92,
		92,3,0,9,10,13,13,32,32,218,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,
		0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,
		0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
		1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,
		0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
		1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,1,59,1,0,0,0,3,66,1,0,0,
		0,5,68,1,0,0,0,7,80,1,0,0,0,9,82,1,0,0,0,11,92,1,0,0,0,13,99,1,0,0,0,15,
		101,1,0,0,0,17,110,1,0,0,0,19,112,1,0,0,0,21,114,1,0,0,0,23,121,1,0,0,
		0,25,132,1,0,0,0,27,146,1,0,0,0,29,148,1,0,0,0,31,150,1,0,0,0,33,153,1,
		0,0,0,35,156,1,0,0,0,37,159,1,0,0,0,39,163,1,0,0,0,41,167,1,0,0,0,43,171,
		1,0,0,0,45,182,1,0,0,0,47,193,1,0,0,0,49,195,1,0,0,0,51,197,1,0,0,0,53,
		199,1,0,0,0,55,201,1,0,0,0,57,204,1,0,0,0,59,60,5,115,0,0,60,61,5,99,0,
		0,61,62,5,114,0,0,62,63,5,105,0,0,63,64,5,112,0,0,64,65,5,116,0,0,65,2,
		1,0,0,0,66,67,5,91,0,0,67,4,1,0,0,0,68,69,5,101,0,0,69,70,5,110,0,0,70,
		71,5,100,0,0,71,72,5,102,0,0,72,73,5,117,0,0,73,74,5,110,0,0,74,75,5,99,
		0,0,75,76,5,116,0,0,76,77,5,105,0,0,77,78,5,111,0,0,78,79,5,110,0,0,79,
		6,1,0,0,0,80,81,5,93,0,0,81,8,1,0,0,0,82,83,5,83,0,0,83,84,5,101,0,0,84,
		85,5,107,0,0,85,86,5,116,0,0,86,87,5,83,0,0,87,88,5,116,0,0,88,89,5,114,
		0,0,89,90,5,117,0,0,90,91,5,107,0,0,91,10,1,0,0,0,92,93,5,110,0,0,93,94,
		5,97,0,0,94,95,5,116,0,0,95,96,5,105,0,0,96,97,5,118,0,0,97,98,5,101,0,
		0,98,12,1,0,0,0,99,100,5,123,0,0,100,14,1,0,0,0,101,102,5,83,0,0,102,103,
		5,116,0,0,103,104,5,114,0,0,104,105,5,117,0,0,105,106,5,107,0,0,106,107,
		5,75,0,0,107,108,5,101,0,0,108,109,5,121,0,0,109,16,1,0,0,0,110,111,5,
		125,0,0,111,18,1,0,0,0,112,113,5,61,0,0,113,20,1,0,0,0,114,118,7,0,0,0,
		115,117,7,1,0,0,116,115,1,0,0,0,117,120,1,0,0,0,118,116,1,0,0,0,118,119,
		1,0,0,0,119,22,1,0,0,0,120,118,1,0,0,0,121,122,5,45,0,0,122,123,5,45,0,
		0,123,127,1,0,0,0,124,126,8,2,0,0,125,124,1,0,0,0,126,129,1,0,0,0,127,
		125,1,0,0,0,127,128,1,0,0,0,128,130,1,0,0,0,129,127,1,0,0,0,130,131,6,
		11,0,0,131,24,1,0,0,0,132,133,5,47,0,0,133,134,5,42,0,0,134,138,1,0,0,
		0,135,137,9,0,0,0,136,135,1,0,0,0,137,140,1,0,0,0,138,139,1,0,0,0,138,
		136,1,0,0,0,139,141,1,0,0,0,140,138,1,0,0,0,141,142,5,42,0,0,142,143,5,
		47,0,0,143,144,1,0,0,0,144,145,6,12,0,0,145,26,1,0,0,0,146,147,5,40,0,
		0,147,28,1,0,0,0,148,149,5,41,0,0,149,30,1,0,0,0,150,151,5,37,0,0,151,
		152,5,105,0,0,152,32,1,0,0,0,153,154,5,37,0,0,154,155,5,115,0,0,155,34,
		1,0,0,0,156,157,5,37,0,0,157,158,5,102,0,0,158,36,1,0,0,0,159,160,5,58,
		0,0,160,161,5,105,0,0,161,38,1,0,0,0,162,164,7,3,0,0,163,162,1,0,0,0,164,
		165,1,0,0,0,165,163,1,0,0,0,165,166,1,0,0,0,166,40,1,0,0,0,167,168,3,39,
		19,0,168,169,5,46,0,0,169,170,3,39,19,0,170,42,1,0,0,0,171,177,5,34,0,
		0,172,176,8,4,0,0,173,174,5,92,0,0,174,176,9,0,0,0,175,172,1,0,0,0,175,
		173,1,0,0,0,176,179,1,0,0,0,177,175,1,0,0,0,177,178,1,0,0,0,178,180,1,
		0,0,0,179,177,1,0,0,0,180,181,5,34,0,0,181,44,1,0,0,0,182,188,5,39,0,0,
		183,187,8,5,0,0,184,185,5,92,0,0,185,187,9,0,0,0,186,183,1,0,0,0,186,184,
		1,0,0,0,187,190,1,0,0,0,188,186,1,0,0,0,188,189,1,0,0,0,189,191,1,0,0,
		0,190,188,1,0,0,0,191,192,5,39,0,0,192,46,1,0,0,0,193,194,5,43,0,0,194,
		48,1,0,0,0,195,196,5,45,0,0,196,50,1,0,0,0,197,198,5,42,0,0,198,52,1,0,
		0,0,199,200,5,47,0,0,200,54,1,0,0,0,201,202,5,44,0,0,202,56,1,0,0,0,203,
		205,7,6,0,0,204,203,1,0,0,0,205,206,1,0,0,0,206,204,1,0,0,0,206,207,1,
		0,0,0,207,208,1,0,0,0,208,209,6,28,0,0,209,58,1,0,0,0,10,0,118,127,138,
		165,175,177,186,188,206,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
