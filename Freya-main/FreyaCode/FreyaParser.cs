//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Freya.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]




public partial class FreyaParser : Parser {





	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, ID=11, LINE_COMMENT=12, BLOCK_COMMENT=13, LPAREN=14, RPAREN=15, 
		PERCENT_I=16, PERCENT_S=17, PERCENT_F=18, COLON_I=19, DIGITS=20, FLOAT_NUMBER=21, 
		STRING_DOUBLE=22, STRING_SINGLE=23, PLUS=24, MINUS=25, MULT=26, DIV=27, 
		COMMA=28, WS=29;
	public const int
		RULE_codeParse = 0, RULE_statement = 1, RULE_scriptDef = 2, RULE_scriptInit = 3, 
		RULE_comment = 4, RULE_instruction = 5, RULE_functionCall = 6, RULE_argumentList = 7, 
		RULE_argument = 8, RULE_stringLiteral = 9, RULE_variableDef = 10, RULE_typeLiteral = 11, 
		RULE_expression = 12, RULE_value = 13;
	public static readonly string[] ruleNames = {
		"codeParse", "statement", "scriptDef", "scriptInit", "comment", "instruction", 
		"functionCall", "argumentList", "argument", "stringLiteral", "variableDef", 
		"typeLiteral", "expression", "value"
	};

	private static readonly string[] _LiteralNames = {
		null, "'script'", "'['", "'endfunction'", "']'", "'SektStruk'", "'native'", 
		"'{'", "'StrukKey'", "'}'", "'='", null, null, null, "'('", "')'", "'%i'", 
		"'%s'", "'%f'", "':i'", null, null, null, null, "'+'", "'-'", "'*'", "'/'", 
		"','"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, "ID", 
		"LINE_COMMENT", "BLOCK_COMMENT", "LPAREN", "RPAREN", "PERCENT_I", "PERCENT_S", 
		"PERCENT_F", "COLON_I", "DIGITS", "FLOAT_NUMBER", "STRING_DOUBLE", "STRING_SINGLE", 
		"PLUS", "MINUS", "MULT", "DIV", "COMMA", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Freya.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static FreyaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public FreyaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public FreyaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CodeParseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(FreyaParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScriptDefContext[] scriptDef() {
			return GetRuleContexts<ScriptDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScriptDefContext scriptDef(int i) {
			return GetRuleContext<ScriptDefContext>(i);
		}
		public CodeParseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeParse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFreyaListener typedListener = listener as IFreyaListener;
			if (typedListener != null) typedListener.EnterCodeParse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFreyaListener typedListener = listener as IFreyaListener;
			if (typedListener != null) typedListener.ExitCodeParse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFreyaVisitor<TResult> typedVisitor = visitor as IFreyaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodeParse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeParseContext codeParse() {
		CodeParseContext _localctx = new CodeParseContext(Context, State);
		EnterRule(_localctx, 0, RULE_codeParse);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 536578L) != 0)) {
				{
				State = 30;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LINE_COMMENT:
				case BLOCK_COMMENT:
				case COLON_I:
					{
					State = 28;
					statement();
					}
					break;
				case T__0:
					{
					State = 29;
					scriptDef();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 34;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 35;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFreyaListener typedListener = listener as IFreyaListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFreyaListener typedListener = listener as IFreyaListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFreyaVisitor<TResult> typedVisitor = visitor as IFreyaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 39;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LINE_COMMENT:
			case BLOCK_COMMENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 37;
				comment();
				}
				break;
			case COLON_I:
				EnterOuterAlt(_localctx, 2);
				{
				State = 38;
				instruction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScriptDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON_I() { return GetToken(FreyaParser.COLON_I, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScriptInitContext scriptInit() {
			return GetRuleContext<ScriptInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ScriptDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scriptDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFreyaListener typedListener = listener as IFreyaListener;
			if (typedListener != null) typedListener.EnterScriptDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFreyaListener typedListener = listener as IFreyaListener;
			if (typedListener != null) typedListener.ExitScriptDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFreyaVisitor<TResult> typedVisitor = visitor as IFreyaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScriptDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptDefContext scriptDef() {
		ScriptDefContext _localctx = new ScriptDefContext(Context, State);
		EnterRule(_localctx, 4, RULE_scriptDef);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 41;
			Match(T__0);
			State = 42;
			stringLiteral();
			State = 43;
			Match(T__1);
			State = 45;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 44;
				scriptInit();
				}
			}

			State = 50;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 47;
					statement();
					}
					} 
				}
				State = 52;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			State = 53;
			Match(COLON_I);
			State = 54;
			Match(T__2);
			State = 55;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScriptInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDefContext[] variableDef() {
			return GetRuleContexts<VariableDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDefContext variableDef(int i) {
			return GetRuleContext<VariableDefContext>(i);
		}
		public ScriptInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scriptInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFreyaListener typedListener = listener as IFreyaListener;
			if (typedListener != null) typedListener.EnterScriptInit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFreyaListener typedListener = listener as IFreyaListener;
			if (typedListener != null) typedListener.ExitScriptInit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFreyaVisitor<TResult> typedVisitor = visitor as IFreyaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScriptInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptInitContext scriptInit() {
		ScriptInitContext _localctx = new ScriptInitContext(Context, State);
		EnterRule(_localctx, 6, RULE_scriptInit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			Match(T__4);
			State = 58;
			Match(T__5);
			State = 59;
			Match(T__6);
			State = 64;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__7) {
				{
				{
				State = 60;
				Match(T__7);
				State = 61;
				variableDef();
				}
				}
				State = 66;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 67;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINE_COMMENT() { return GetToken(FreyaParser.LINE_COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCK_COMMENT() { return GetToken(FreyaParser.BLOCK_COMMENT, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFreyaListener typedListener = listener as IFreyaListener;
			if (typedListener != null) typedListener.EnterComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFreyaListener typedListener = listener as IFreyaListener;
			if (typedListener != null) typedListener.ExitComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFreyaVisitor<TResult> typedVisitor = visitor as IFreyaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(Context, State);
		EnterRule(_localctx, 8, RULE_comment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			_la = TokenStream.LA(1);
			if ( !(_la==LINE_COMMENT || _la==BLOCK_COMMENT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON_I() { return GetToken(FreyaParser.COLON_I, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDefContext variableDef() {
			return GetRuleContext<VariableDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(FreyaParser.WS, 0); }
		public InstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFreyaListener typedListener = listener as IFreyaListener;
			if (typedListener != null) typedListener.EnterInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFreyaListener typedListener = listener as IFreyaListener;
			if (typedListener != null) typedListener.ExitInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFreyaVisitor<TResult> typedVisitor = visitor as IFreyaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionContext instruction() {
		InstructionContext _localctx = new InstructionContext(Context, State);
		EnterRule(_localctx, 10, RULE_instruction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			Match(COLON_I);
			State = 73;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 72;
				Match(WS);
				}
			}

			State = 77;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 75;
				functionCall();
				}
				break;
			case 2:
				{
				State = 76;
				variableDef();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(FreyaParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FreyaParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FreyaParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(FreyaParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(FreyaParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFreyaListener typedListener = listener as IFreyaListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFreyaListener typedListener = listener as IFreyaListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFreyaVisitor<TResult> typedVisitor = visitor as IFreyaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 12, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			Match(ID);
			State = 80;
			Match(LPAREN);
			State = 82;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 81;
				Match(WS);
				}
				break;
			}
			State = 85;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 15747072L) != 0)) {
				{
				State = 84;
				argumentList();
				}
			}

			State = 88;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 87;
				Match(WS);
				}
			}

			State = 90;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FreyaParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FreyaParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(FreyaParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(FreyaParser.WS, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFreyaListener typedListener = listener as IFreyaListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFreyaListener typedListener = listener as IFreyaListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFreyaVisitor<TResult> typedVisitor = visitor as IFreyaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 14, RULE_argumentList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			argument();
			State = 103;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 94;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WS) {
						{
						State = 93;
						Match(WS);
						}
					}

					State = 96;
					Match(COMMA);
					State = 98;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WS) {
						{
						State = 97;
						Match(WS);
						}
					}

					State = 100;
					argument();
					}
					} 
				}
				State = 105;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(FreyaParser.ID, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFreyaListener typedListener = listener as IFreyaListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFreyaListener typedListener = listener as IFreyaListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFreyaVisitor<TResult> typedVisitor = visitor as IFreyaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 16, RULE_argument);
		try {
			State = 108;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 106;
				expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 107;
				Match(ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_DOUBLE() { return GetToken(FreyaParser.STRING_DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_SINGLE() { return GetToken(FreyaParser.STRING_SINGLE, 0); }
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFreyaListener typedListener = listener as IFreyaListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFreyaListener typedListener = listener as IFreyaListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFreyaVisitor<TResult> typedVisitor = visitor as IFreyaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 18, RULE_stringLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			_la = TokenStream.LA(1);
			if ( !(_la==STRING_DOUBLE || _la==STRING_SINGLE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(FreyaParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeLiteralContext typeLiteral() {
			return GetRuleContext<TypeLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FreyaParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FreyaParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(FreyaParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(FreyaParser.WS, i);
		}
		public VariableDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFreyaListener typedListener = listener as IFreyaListener;
			if (typedListener != null) typedListener.EnterVariableDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFreyaListener typedListener = listener as IFreyaListener;
			if (typedListener != null) typedListener.ExitVariableDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFreyaVisitor<TResult> typedVisitor = visitor as IFreyaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDefContext variableDef() {
		VariableDefContext _localctx = new VariableDefContext(Context, State);
		EnterRule(_localctx, 20, RULE_variableDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			Match(ID);
			State = 114;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 113;
				Match(WS);
				}
			}

			State = 116;
			Match(T__9);
			State = 118;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 117;
				Match(WS);
				}
			}

			State = 120;
			typeLiteral();
			State = 122;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 121;
				Match(WS);
				}
			}

			State = 124;
			Match(LPAREN);
			State = 126;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 125;
				Match(WS);
				}
			}

			State = 128;
			expression(0);
			State = 130;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 129;
				Match(WS);
				}
			}

			State = 132;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_I() { return GetToken(FreyaParser.PERCENT_I, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_S() { return GetToken(FreyaParser.PERCENT_S, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_F() { return GetToken(FreyaParser.PERCENT_F, 0); }
		public TypeLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFreyaListener typedListener = listener as IFreyaListener;
			if (typedListener != null) typedListener.EnterTypeLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFreyaListener typedListener = listener as IFreyaListener;
			if (typedListener != null) typedListener.ExitTypeLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFreyaVisitor<TResult> typedVisitor = visitor as IFreyaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeLiteralContext typeLiteral() {
		TypeLiteralContext _localctx = new TypeLiteralContext(Context, State);
		EnterRule(_localctx, 22, RULE_typeLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 458752L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ValueExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ValueExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFreyaListener typedListener = listener as IFreyaListener;
			if (typedListener != null) typedListener.EnterValueExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFreyaListener typedListener = listener as IFreyaListener;
			if (typedListener != null) typedListener.ExitValueExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFreyaVisitor<TResult> typedVisitor = visitor as IFreyaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MulDivExprContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(FreyaParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(FreyaParser.DIV, 0); }
		public MulDivExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFreyaListener typedListener = listener as IFreyaListener;
			if (typedListener != null) typedListener.EnterMulDivExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFreyaListener typedListener = listener as IFreyaListener;
			if (typedListener != null) typedListener.ExitMulDivExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFreyaVisitor<TResult> typedVisitor = visitor as IFreyaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulDivExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(FreyaParser.ID, 0); }
		public IdExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFreyaListener typedListener = listener as IFreyaListener;
			if (typedListener != null) typedListener.EnterIdExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFreyaListener typedListener = listener as IFreyaListener;
			if (typedListener != null) typedListener.ExitIdExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFreyaVisitor<TResult> typedVisitor = visitor as IFreyaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FreyaParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FreyaParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(FreyaParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(FreyaParser.WS, i);
		}
		public ParenExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFreyaListener typedListener = listener as IFreyaListener;
			if (typedListener != null) typedListener.EnterParenExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFreyaListener typedListener = listener as IFreyaListener;
			if (typedListener != null) typedListener.ExitParenExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFreyaVisitor<TResult> typedVisitor = visitor as IFreyaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddSubExprContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(FreyaParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(FreyaParser.MINUS, 0); }
		public AddSubExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFreyaListener typedListener = listener as IFreyaListener;
			if (typedListener != null) typedListener.EnterAddSubExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFreyaListener typedListener = listener as IFreyaListener;
			if (typedListener != null) typedListener.ExitAddSubExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFreyaVisitor<TResult> typedVisitor = visitor as IFreyaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddSubExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
				{
				_localctx = new ParenExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 137;
				Match(LPAREN);
				State = 139;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 138;
					Match(WS);
					}
				}

				State = 141;
				expression(0);
				State = 143;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 142;
					Match(WS);
					}
				}

				State = 145;
				Match(RPAREN);
				}
				break;
			case DIGITS:
			case FLOAT_NUMBER:
			case STRING_DOUBLE:
			case STRING_SINGLE:
				{
				_localctx = new ValueExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 147;
				value();
				}
				break;
			case ID:
				{
				_localctx = new IdExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 148;
				Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 159;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 157;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
					case 1:
						{
						_localctx = new MulDivExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 151;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 152;
						((MulDivExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==MULT || _la==DIV) ) {
							((MulDivExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 153;
						expression(6);
						}
						break;
					case 2:
						{
						_localctx = new AddSubExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 154;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 155;
						((AddSubExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((AddSubExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 156;
						expression(5);
						}
						break;
					}
					} 
				}
				State = 161;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
	 
		public ValueContext() { }
		public virtual void CopyFrom(ValueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IntValueContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGITS() { return GetToken(FreyaParser.DIGITS, 0); }
		public IntValueContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFreyaListener typedListener = listener as IFreyaListener;
			if (typedListener != null) typedListener.EnterIntValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFreyaListener typedListener = listener as IFreyaListener;
			if (typedListener != null) typedListener.ExitIntValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFreyaVisitor<TResult> typedVisitor = visitor as IFreyaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FloatValueContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_NUMBER() { return GetToken(FreyaParser.FLOAT_NUMBER, 0); }
		public FloatValueContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFreyaListener typedListener = listener as IFreyaListener;
			if (typedListener != null) typedListener.EnterFloatValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFreyaListener typedListener = listener as IFreyaListener;
			if (typedListener != null) typedListener.ExitFloatValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFreyaVisitor<TResult> typedVisitor = visitor as IFreyaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringSingleValueContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_SINGLE() { return GetToken(FreyaParser.STRING_SINGLE, 0); }
		public StringSingleValueContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFreyaListener typedListener = listener as IFreyaListener;
			if (typedListener != null) typedListener.EnterStringSingleValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFreyaListener typedListener = listener as IFreyaListener;
			if (typedListener != null) typedListener.ExitStringSingleValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFreyaVisitor<TResult> typedVisitor = visitor as IFreyaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringSingleValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringDoubleValueContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_DOUBLE() { return GetToken(FreyaParser.STRING_DOUBLE, 0); }
		public StringDoubleValueContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFreyaListener typedListener = listener as IFreyaListener;
			if (typedListener != null) typedListener.EnterStringDoubleValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFreyaListener typedListener = listener as IFreyaListener;
			if (typedListener != null) typedListener.ExitStringDoubleValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFreyaVisitor<TResult> typedVisitor = visitor as IFreyaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringDoubleValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 26, RULE_value);
		try {
			State = 166;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DIGITS:
				_localctx = new IntValueContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 162;
				Match(DIGITS);
				}
				break;
			case FLOAT_NUMBER:
				_localctx = new FloatValueContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 163;
				Match(FLOAT_NUMBER);
				}
				break;
			case STRING_DOUBLE:
				_localctx = new StringDoubleValueContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 164;
				Match(STRING_DOUBLE);
				}
				break;
			case STRING_SINGLE:
				_localctx = new StringSingleValueContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 165;
				Match(STRING_SINGLE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 12: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 4);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,29,169,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,1,0,1,0,5,
		0,31,8,0,10,0,12,0,34,9,0,1,0,1,0,1,1,1,1,3,1,40,8,1,1,2,1,2,1,2,1,2,3,
		2,46,8,2,1,2,5,2,49,8,2,10,2,12,2,52,9,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,
		3,1,3,5,3,63,8,3,10,3,12,3,66,9,3,1,3,1,3,1,4,1,4,1,5,1,5,3,5,74,8,5,1,
		5,1,5,3,5,78,8,5,1,6,1,6,1,6,3,6,83,8,6,1,6,3,6,86,8,6,1,6,3,6,89,8,6,
		1,6,1,6,1,7,1,7,3,7,95,8,7,1,7,1,7,3,7,99,8,7,1,7,5,7,102,8,7,10,7,12,
		7,105,9,7,1,8,1,8,3,8,109,8,8,1,9,1,9,1,10,1,10,3,10,115,8,10,1,10,1,10,
		3,10,119,8,10,1,10,1,10,3,10,123,8,10,1,10,1,10,3,10,127,8,10,1,10,1,10,
		3,10,131,8,10,1,10,1,10,1,11,1,11,1,12,1,12,1,12,3,12,140,8,12,1,12,1,
		12,3,12,144,8,12,1,12,1,12,1,12,1,12,3,12,150,8,12,1,12,1,12,1,12,1,12,
		1,12,1,12,5,12,158,8,12,10,12,12,12,161,9,12,1,13,1,13,1,13,1,13,3,13,
		167,8,13,1,13,0,1,24,14,0,2,4,6,8,10,12,14,16,18,20,22,24,26,0,5,1,0,12,
		13,1,0,22,23,1,0,16,18,1,0,26,27,1,0,24,25,183,0,32,1,0,0,0,2,39,1,0,0,
		0,4,41,1,0,0,0,6,57,1,0,0,0,8,69,1,0,0,0,10,71,1,0,0,0,12,79,1,0,0,0,14,
		92,1,0,0,0,16,108,1,0,0,0,18,110,1,0,0,0,20,112,1,0,0,0,22,134,1,0,0,0,
		24,149,1,0,0,0,26,166,1,0,0,0,28,31,3,2,1,0,29,31,3,4,2,0,30,28,1,0,0,
		0,30,29,1,0,0,0,31,34,1,0,0,0,32,30,1,0,0,0,32,33,1,0,0,0,33,35,1,0,0,
		0,34,32,1,0,0,0,35,36,5,0,0,1,36,1,1,0,0,0,37,40,3,8,4,0,38,40,3,10,5,
		0,39,37,1,0,0,0,39,38,1,0,0,0,40,3,1,0,0,0,41,42,5,1,0,0,42,43,3,18,9,
		0,43,45,5,2,0,0,44,46,3,6,3,0,45,44,1,0,0,0,45,46,1,0,0,0,46,50,1,0,0,
		0,47,49,3,2,1,0,48,47,1,0,0,0,49,52,1,0,0,0,50,48,1,0,0,0,50,51,1,0,0,
		0,51,53,1,0,0,0,52,50,1,0,0,0,53,54,5,19,0,0,54,55,5,3,0,0,55,56,5,4,0,
		0,56,5,1,0,0,0,57,58,5,5,0,0,58,59,5,6,0,0,59,64,5,7,0,0,60,61,5,8,0,0,
		61,63,3,20,10,0,62,60,1,0,0,0,63,66,1,0,0,0,64,62,1,0,0,0,64,65,1,0,0,
		0,65,67,1,0,0,0,66,64,1,0,0,0,67,68,5,9,0,0,68,7,1,0,0,0,69,70,7,0,0,0,
		70,9,1,0,0,0,71,73,5,19,0,0,72,74,5,29,0,0,73,72,1,0,0,0,73,74,1,0,0,0,
		74,77,1,0,0,0,75,78,3,12,6,0,76,78,3,20,10,0,77,75,1,0,0,0,77,76,1,0,0,
		0,78,11,1,0,0,0,79,80,5,11,0,0,80,82,5,14,0,0,81,83,5,29,0,0,82,81,1,0,
		0,0,82,83,1,0,0,0,83,85,1,0,0,0,84,86,3,14,7,0,85,84,1,0,0,0,85,86,1,0,
		0,0,86,88,1,0,0,0,87,89,5,29,0,0,88,87,1,0,0,0,88,89,1,0,0,0,89,90,1,0,
		0,0,90,91,5,15,0,0,91,13,1,0,0,0,92,103,3,16,8,0,93,95,5,29,0,0,94,93,
		1,0,0,0,94,95,1,0,0,0,95,96,1,0,0,0,96,98,5,28,0,0,97,99,5,29,0,0,98,97,
		1,0,0,0,98,99,1,0,0,0,99,100,1,0,0,0,100,102,3,16,8,0,101,94,1,0,0,0,102,
		105,1,0,0,0,103,101,1,0,0,0,103,104,1,0,0,0,104,15,1,0,0,0,105,103,1,0,
		0,0,106,109,3,24,12,0,107,109,5,11,0,0,108,106,1,0,0,0,108,107,1,0,0,0,
		109,17,1,0,0,0,110,111,7,1,0,0,111,19,1,0,0,0,112,114,5,11,0,0,113,115,
		5,29,0,0,114,113,1,0,0,0,114,115,1,0,0,0,115,116,1,0,0,0,116,118,5,10,
		0,0,117,119,5,29,0,0,118,117,1,0,0,0,118,119,1,0,0,0,119,120,1,0,0,0,120,
		122,3,22,11,0,121,123,5,29,0,0,122,121,1,0,0,0,122,123,1,0,0,0,123,124,
		1,0,0,0,124,126,5,14,0,0,125,127,5,29,0,0,126,125,1,0,0,0,126,127,1,0,
		0,0,127,128,1,0,0,0,128,130,3,24,12,0,129,131,5,29,0,0,130,129,1,0,0,0,
		130,131,1,0,0,0,131,132,1,0,0,0,132,133,5,15,0,0,133,21,1,0,0,0,134,135,
		7,2,0,0,135,23,1,0,0,0,136,137,6,12,-1,0,137,139,5,14,0,0,138,140,5,29,
		0,0,139,138,1,0,0,0,139,140,1,0,0,0,140,141,1,0,0,0,141,143,3,24,12,0,
		142,144,5,29,0,0,143,142,1,0,0,0,143,144,1,0,0,0,144,145,1,0,0,0,145,146,
		5,15,0,0,146,150,1,0,0,0,147,150,3,26,13,0,148,150,5,11,0,0,149,136,1,
		0,0,0,149,147,1,0,0,0,149,148,1,0,0,0,150,159,1,0,0,0,151,152,10,5,0,0,
		152,153,7,3,0,0,153,158,3,24,12,6,154,155,10,4,0,0,155,156,7,4,0,0,156,
		158,3,24,12,5,157,151,1,0,0,0,157,154,1,0,0,0,158,161,1,0,0,0,159,157,
		1,0,0,0,159,160,1,0,0,0,160,25,1,0,0,0,161,159,1,0,0,0,162,167,5,20,0,
		0,163,167,5,21,0,0,164,167,5,22,0,0,165,167,5,23,0,0,166,162,1,0,0,0,166,
		163,1,0,0,0,166,164,1,0,0,0,166,165,1,0,0,0,167,27,1,0,0,0,26,30,32,39,
		45,50,64,73,77,82,85,88,94,98,103,108,114,118,122,126,130,139,143,149,
		157,159,166
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
